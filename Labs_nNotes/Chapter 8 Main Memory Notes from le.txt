Chapter 8 Main Memory Notes from lecture

Base and Limit Registers
- base: the first address of the allotted memory
- limit: the last address of the allotted memory or the length of the memory space

Binding of Instructions and Data to Memory
- three different kinds of binding instructions and data to memory
	1. compile time: absolute code can be generated and must recompile code if starting location changes
	2. load time: must generate relocatable code if memory is not known at compile time
	3. execution time: binding delay until run time if the process can be moved during its execution from one memory segment to another

Logical and Physical Address space
- logical address space is generated by the CPU

memory management unit (MMU)
- manages all the memory that takes care of where and who can use memory

Swapping
-whenever a process is swapping into a CPU, it pulls the resources, memory, etc. that are neeeded, and when the process is swapping out, all these pulled are released.

Context Switch time including swapping
- context switching time can be very high, which if we can limit the size being swapped, the return time will be quicker.
- there are additional constrains on swapping aside from timing
	--pending input/output which cannot swap out until entirely complete
	--double buffering:during the context switching time, there can be multiple levels in which the data is being switched.

Contiguous Allocation
- main memory must support both the operating system and user processes
- limitted resources must alllocate efficiently
- contiguous allocation is one early method
- main memory usually is in two partitions:



Fragmentation
- external fragmentation: total memory space exists to satisfy a request but is not Contiguous
- internal fragmentation: allocated memory may be slightly larger than requested memory; different size than the internal memory to a partition but not being used

Paging
- physical address space of a process that can be noncontiguous; allocated in physical memory whenever it is available.
- pages is how the logical memory is blocked and separated
- frames are how the physical memory is separated into fixed blocks.

- pages are always loaded into memory, and when the set amount of frames are free, then the program pages can be loaded.
-a page table translates the logical to physical addresses.

address Translation Scheme
- page number(p): used to index the page table to contain the base address of each page in physical memory
- page offset(d): combines with base address to define the physical memory address

Paging Model of Logical and Physical Memory
- this takes the pages, to the mapped frame number to which it is allocated.
--> I have a picture of this to view!



